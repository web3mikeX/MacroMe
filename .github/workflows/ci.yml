# MealPrep Pro CI/CD Pipeline
# Runs on: lint → type-check → build → Playwright smoke test (/dashboard loads)

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Linting and code quality checks
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 💅 Check Prettier formatting
        run: pnpm format:check

      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: lint-results
          path: |
            eslint-report.json
            .next/

  # TypeScript type checking
  typecheck:
    name: 🔧 Type Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Run TypeScript type check
        run: pnpm tsc --noEmit

  # Build the application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, typecheck]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build
        env:
          # Mock environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: https://mock.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 1

  # Playwright smoke tests
  e2e-test:
    name: 🧪 E2E Smoke Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: pnpm dlx playwright install --with-deps chromium

      - name: 🐳 Start Supabase (for testing)
        run: |
          # Set up minimal Supabase for testing
          docker run -d \
            --name postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=postgres \
            -p 5432:5432 \
            postgres:15-alpine
          
          # Wait for PostgreSQL to be ready
          until docker exec postgres pg_isready; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: 📊 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: 🚀 Start application
        run: |
          # Start the app in background
          pnpm start &
          echo $! > .next_pid
          
          # Wait for app to be ready
          timeout 60s bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
        env:
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:8000
          NEXT_PUBLIC_SUPABASE_ANON_KEY: mock-anon-key
          PORT: 3000

      - name: 🧪 Run Playwright smoke tests
        run: pnpm dlx playwright test --config=playwright.config.ci.ts
        env:
          BASE_URL: http://localhost:3000

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f .next_pid ]; then
            kill $(cat .next_pid) || true
          fi
          docker stop postgres || true
          docker rm postgres || true

  # Security audit
  audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level high

      - name: 🔍 Run dependency check
        run: pnpm dlx audit-ci --config audit-ci.json
        continue-on-error: true

  # Performance and bundle analysis
  analyze:
    name: 📈 Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📊 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: 📈 Analyze bundle size
        run: pnpm dlx @next/bundle-analyzer
        env:
          ANALYZE: true

      - name: 💬 Comment bundle size
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('.next/analyze/sizes.json')) {
              const sizes = JSON.parse(fs.readFileSync('.next/analyze/sizes.json', 'utf8'));
              const comment = `## 📊 Bundle Size Analysis\n\n${JSON.stringify(sizes, null, 2)}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Deployment readiness check
  deploy-check:
    name: 🚀 Deployment Check
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, e2e-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ✅ Validate deployment readiness
        run: |
          echo "🎉 All checks passed! Ready for deployment."
          echo "📦 Build artifacts verified"
          echo "🧪 E2E tests passed"
          echo "🔒 Security audit completed"
          
      - name: 📊 Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Linting passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for production deployment!**" >> $GITHUB_STEP_SUMMARY

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [e2e-test, audit, analyze]
    if: always()

    steps:
      - name: 🧹 Remove build artifacts
        uses: actions/github-script@v6
        with:
          script: |
            // Clean up artifacts older than 1 day
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('build-') && 
                  new Date() - new Date(artifact.created_at) > 24 * 60 * 60 * 1000) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }